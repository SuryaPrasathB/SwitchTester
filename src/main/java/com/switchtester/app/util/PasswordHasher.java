package com.switchtester.app.util;

import org.mindrot.jbcrypt.BCrypt;

import com.switchtester.app.ApplicationLauncher;

/**
 * Utility class for securely hashing and verifying passwords using BCrypt.
 */
public class PasswordHasher {

    // Define the BCrypt workload factor. Higher values are more secure but slower.
    // 10 is a good default for general applications.
    private static final int WORKLOAD = 12; // Increased for better security, adjust if performance is an issue

    /**
     * Hashes a plain-text password using BCrypt.
     * The salt is automatically generated by BCrypt.
     *
     * @param plainTextPassword The password to hash.
     * @return The BCrypt hashed password.
     */
    public static String hashPassword(String plainTextPassword) {
        if (plainTextPassword == null || plainTextPassword.isEmpty()) {
            throw new IllegalArgumentException("Password cannot be null or empty.");
        }
        // Generate a salt and hash the password
        return BCrypt.hashpw(plainTextPassword, BCrypt.gensalt(WORKLOAD));
    }

    /**
     * Verifies a plain-text password against a BCrypt hashed password.
     *
     * @param plainTextPassword The plain-text password entered by the user.
     * @param hashedPassword    The BCrypt hashed password retrieved from storage.
     * @return true if the plain-text password matches the hashed password, false otherwise.
     */
    public static boolean checkPassword(String plainTextPassword, String hashedPassword) {
        if (plainTextPassword == null || hashedPassword == null) {
            return false; // Cannot check null passwords
        }
        try {
            return BCrypt.checkpw(plainTextPassword, hashedPassword);
        } catch (IllegalArgumentException e) {
            // This can happen if the hashedPassword is not a valid BCrypt hash
            ApplicationLauncher.logger.error("Error checking password (invalid hash format): " + e.getMessage());
            return false;
        }
    }

    // Main method for testing the hasher (optional, remove for production)
    public static void main(String[] args) {
        String password = "password";
        String hashedPassword = hashPassword(password);
        ApplicationLauncher.logger.info("Original password: " + password);
        ApplicationLauncher.logger.info("Hashed password: " + hashedPassword);

        ApplicationLauncher.logger.info("Checking 'password': " + checkPassword("password", hashedPassword));
        ApplicationLauncher.logger.info("Checking 'wrongpass': " + checkPassword("wrongpass", hashedPassword));
        ApplicationLauncher.logger.info("Checking 'password' against different hash: " + checkPassword("password", hashPassword("anotherpass")));
    }
}
