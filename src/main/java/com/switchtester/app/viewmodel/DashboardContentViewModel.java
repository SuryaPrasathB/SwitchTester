package com.switchtester.app.viewmodel;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.util.Duration;

import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ResourceBundle;

import com.switchtester.app.ApplicationLauncher;

/**
 * ViewModel for the initial content shown on the Dashboard screen.
 */
public class DashboardContentViewModel implements Initializable {

    @FXML
    private Label dateLabel;
    @FXML
    private Label timeLabel;
    @FXML
    private Label totalSwitchesLabel;
    @FXML
    private Label passSwitchesLabel;
    @FXML
    private Label failSwitchesLabel;
    @FXML
    private Button emergencyStopButton;

    // Date and time formatters
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");

    /**
     * Initializes the controller class. This method is automatically called
     * after the FXML file has been loaded.
     *
     * @param location The location used to resolve relative paths for the root object, or null if the location is not known.
     * @param resources The resources used to localize the root object, or null if the root object was not localized.
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        ApplicationLauncher.logger.info("Dashboard Content View Initialized.");

        // Initialize and update date/time
        updateDateTime();
        Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(1), event -> updateDateTime()));
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();

        // Set dummy data for switches tested
        totalSwitchesLabel.setText("5000");
        passSwitchesLabel.setText("4800");
        failSwitchesLabel.setText("200");

        // Add a subtle animation to the EMERGENCY STOP button on hover
        emergencyStopButton.setOnMouseEntered(e -> {
            emergencyStopButton.setScaleX(1.05);
            emergencyStopButton.setScaleY(1.05);
        });
        emergencyStopButton.setOnMouseExited(e -> {
            emergencyStopButton.setScaleX(1.0);
            emergencyStopButton.setScaleY(1.0);
        });
    }

    /**
     * Updates the date and time labels with the current date and time.
     */
    private void updateDateTime() {
        LocalDateTime now = LocalDateTime.now();
        dateLabel.setText(now.format(dateFormatter));
        timeLabel.setText(now.format(timeFormatter));
    }

    /**
     * Handles the action when the EMERGENCY STOP button is clicked.
     * This is a placeholder for critical stop logic.
     * @param event The ActionEvent generated by the button click.
     */
    @FXML
    private void handleEmergencyStop(ActionEvent event) {
    	ApplicationLauncher.logger.info("EMERGENCY STOP button clicked! Implementing critical stop logic.");
        // In a real application, this would trigger immediate shutdown of hardware,
        // saving state, and potentially showing a critical alert.
        // For now, it just prints to console.
    }
}
